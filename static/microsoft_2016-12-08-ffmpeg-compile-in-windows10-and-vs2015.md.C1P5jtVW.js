import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.BeMlo_ux.js";const h="/static/20250516792176.CTaSguXc.png",t="/static/20250516792178.CD9zb61_.png",y=JSON.parse('{"title":"基于ffmpeg库的微软开源项目FFmpegInterop for UWP","description":"","frontmatter":{"title":"基于ffmpeg库的微软开源项目FFmpegInterop for UWP","date":"2016-12-08T18:48:05.000Z","outline":"deep"},"headers":[],"relativePath":"microsoft/2016-12-08-ffmpeg-compile-in-windows10-and-vs2015.md","filePath":"microsoft/2016-12-08-ffmpeg-compile-in-windows10-and-vs2015.md","lastUpdated":1747924457000}'),e={name:"microsoft/2016-12-08-ffmpeg-compile-in-windows10-and-vs2015.md"};function l(F,s,k,r,g,d){return n(),a("div",null,s[0]||(s[0]=[p(`<h2 id="ffmpeginterop-简介" tabindex="-1">FFmpegInterop 简介 <a class="header-anchor" href="#ffmpeginterop-简介" aria-label="Permalink to &quot;FFmpegInterop 简介&quot;">​</a></h2><p>FFmpegInterop是一个开源项目，旨在提供一种简单的方法在Windows 10，Windows 8.1和Windows Phone 8.1应用程序中使用FFmpeg播放各种媒体内容。 FFmpegInterop实现了一个MediaStreamSource，它利用FFmpeg来处理媒体，并使用Windows媒体管道进行播放。</p><p>这种方法的优点之一是音频和视频同步由Windows媒体管道处理。您还可以使用Windows内置的音频和视频解码器，允许更好的功耗移动设备。</p><p>FFmpegInterop库托管在Github下，项目地址：<a href="https://github.com/Microsoft/FFmpegInterop" target="_blank" rel="noreferrer">FFmpegInterop库</a></p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>FFmpegInterop 基于<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noreferrer">FFmpeg库</a>开发的二次开发库 依赖<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noreferrer">FFmpeg库</a>的lib include 等文件<br> 那么我们就要对 <a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noreferrer">FFmpeg库</a>进行编译，这里微软的开源项目 <a href="https://github.com/Microsoft/FFmpegInterop" target="_blank" rel="noreferrer">FFmpegInterop库</a> 提供了很好的帮助</p><ol><li>首先你可以很容易的从git 上克隆出最新的 FFmpeg 版本 存放在本地</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git://github.com/microsoft/FFmpegInterop.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FFmpegInterop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git://source.ffmpeg.org/ffmpeg.git</span></span></code></pre></div><ol><li>下载的时间比较长完成之后你的FFmpegInterop 库文件夹应该是这样的</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FFmpegInterop\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 从最新地址获取源码[FFmpeg库][FFmpeg]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FFmpegInterop\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FFmpegInterop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WinRT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Samples\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Media</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Player</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> applications</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 实例</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C++,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C#,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Tests\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FFmpegInterop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 单元测试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [关于描述 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FFmpeg库</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的帮助脚本</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ][FFmpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FFmpegConfig.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 含有FFmpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置选项内部脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FFmpegWin8.1.sln</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Microsoft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Visual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Studio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2013</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> solution</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Phone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 解决方案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FFmpegWin10.sln</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Microsoft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Visual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Studio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2015</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> solution</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 解决方案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LICENSE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    README.md</span></span></code></pre></div><p>现在你可以按照<a href="https://trac.ffmpeg.org/wiki/CompilationGuide/WinRT" target="_blank" rel="noreferrer">how to build FFmpeg for WinRT apps</a>说明完成设置</p><h2 id="现在我们开始编译-ffmpeg做准备工作" tabindex="-1">现在我们开始编译 FFmpeg做准备工作 <a class="header-anchor" href="#现在我们开始编译-ffmpeg做准备工作" aria-label="Permalink to &quot;现在我们开始编译 FFmpeg做准备工作&quot;">​</a></h2><ol><li>安装VS</li></ol><blockquote><p>Windows 10 请安装 ​Microsoft Visual Studio 2015 Windows 8.1 请安装 ​Microsoft Visual Studio 2013</p></blockquote><ol><li>安装 MSYS2 下载地址：<a href="https://sourceforge.net/projects/msys2/files/Base/x86_64/" target="_blank" rel="noreferrer">MSYS2 建议安装 msys2-x86_64-20150916.exe</a><br> 安装目录下启动MSYS2 msys2_shell.cmd or msys2_shell.bat</li></ol><blockquote><p>$ pacman -Syu 尽量安装到简短的目录下 有关 MSYS2 安装使用的更多内容，可参阅 <a href="http://msys2.github.io/" target="_blank" rel="noreferrer">MSYS2 Wiki</a></p></blockquote><ol><li>安装配置 YASM 下载地址：<a href="http://yasm.tortall.net/" target="_blank" rel="noreferrer">YASM</a></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （源代码）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Win32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VS2010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (用于 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VS2010+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Win64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VS2010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (用于 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VS2010+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Win32 .exe (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 通用</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Win64 .exe (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 通用</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CygWin32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .exe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (用于 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CygWin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DOS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .exe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (用于纯 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DOS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 或</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DJGPP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>下载完成后yasm-1.3.0-win64.exe 改名为 yaml.exe，并放置于 MSYS2 安装目录中。例如，MSYS2 安装在 D:\\msys64，则将 yaml.exe 放置到 D:\\msys64\\usr\\bin\\ 中。<br> 4. 安装配置 gas-preprocessor<br> gas-preprocessor 是用于编译 FFmpeg 的 perl 预处理脚本。<br> gas-preprocessor 下载地址：<a href="https://github.com/FFmpeg/gas-preprocessor" target="_blank" rel="noreferrer">https://github.com/FFmpeg/gas-preprocessor</a><br> 下载 gas-preprocessor.pl 文件后放置于 MSYS2 安装目录中。例如，MSYS2 安装在 D:\\msys64，则将 gas-preprocessor.pl 放置到 D:\\msys64\\usr\\bin\\ 中。</p><h2 id="验证-ffmpeg-编译环境" tabindex="-1">验证 FFmpeg 编译环境 <a class="header-anchor" href="#验证-ffmpeg-编译环境" aria-label="Permalink to &quot;验证 FFmpeg 编译环境&quot;">​</a></h2><p>进行以上步骤之后，编译 FFmpeg 的环境已经基本准备就绪。我们还需要对环境进行一下验证，以保证环境确实准备完毕能够顺利进行编译。</p><blockquote><p>开始-&gt; Visual Studio 2015 -&gt; VS2015 x86 ARM 兼容工具命令提示符<br> 启动 <code>VS2015 x86 ARM 兼容工具命令提示符</code> 在命令行中用 <code>cd</code> 定位到 MSYS2 的安装目录，启动 MSYS2：D:\\msys64\\msys2_shell.cmd<br> 在启动的 MSYS2 终端中分别运行一下命令观察各便于工具组件是否被正确找到：<br> $ which cl /c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/BIN/x86_ARM/cl $ which link /c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/BIN/x86_ARM/link $ which armasm /c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/BIN/x86_ARM/armasm $ which yasm /usr/bin/yasm $ which cpp /usr/bin/cpp $ which gas-preprocessor.pl /usr/bin/gas-preprocessor.pl 如果所有组件均在指定位置被找到，则表示 FFmpeg 编译环境已经准备就绪，可以进入下一步骤编译 FFmpeg。<br> 如果没有通过 VS 提供的 x86 ARM Cross Tools 命令行启动 MSYS2，则 cl, link, armasam 这几个组件有可能定位不到。<br> 也可以选择将 D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_ARM 这个目录加入系统的环境变量。<br> 再次使用还是没有找到。cl link armasm 不管了。我也存在问题。请大牛帮助。不过最后编译成功了。</p></blockquote><h2 id="编译-ffmpeg" tabindex="-1">编译 FFmpeg <a class="header-anchor" href="#编译-ffmpeg" aria-label="Permalink to &quot;编译 FFmpeg&quot;">​</a></h2><p>FFmpegInterop 项目中提供了一个名为 BuildFFmpeg.bat 的批处理文件，借助该批处理，可以轻松进行 FFmpeg 的编译工作。<br> BuildFFmpeg.bat 接受两个可选参数，第一个参数表明目标平台，第二个参数表明目标架构，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x64,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phone8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Phone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> only</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> only</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phone8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Phone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> only</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuildFFmpeg.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phone8.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> win10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> architecture</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> platform</span></span></code></pre></div><p>编译时间较长，编译完成后批处理会自动退出。编译中会有个Output文件夹不用理会，编译后的输出的文件位于项目的 ffmpeg/Build/目标平台/架构 目录内。</p><p>也可以手动进行编译 FFmpeg[链接地址:](<a href="https://trac.ffmpeg.org/wiki/CompilationGuide/WinRT#Compiling" target="_blank" rel="noreferrer">https://trac.ffmpeg.org/wiki/CompilationGuide/WinRT#Compiling</a> for Windows 10)</p><h2 id="编译-ffmpeginterop库" tabindex="-1">编译 FFmpegInterop库 <a class="header-anchor" href="#编译-ffmpeginterop库" aria-label="Permalink to &quot;编译 FFmpegInterop库&quot;">​</a></h2><p>打开 Win 8.1 或 Win 10 对应的项目解决方案 FFmpegInterop 打开 FFmpegInterop 属性页面<br><img src="`+h+'" alt="ffmpeg_build_bin"><br><img src="'+t+'" alt="ffmpeg_build_include"><br> 这个时候 FFmpegInterop 提供的 MediaPlayerCS 项目已经做好了相关配置，开始编译,编译成功。</p><h2 id="引入-ffmpeginterop库" tabindex="-1">引入 FFmpegInterop库 <a class="header-anchor" href="#引入-ffmpeginterop库" aria-label="Permalink to &quot;引入 FFmpegInterop库&quot;">​</a></h2><p>在项目中右键添加项目找到 FFmpegInterop库 并在<code>项目引用</code>里添加</p><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><p><a href="http://blog.csdn.net/finewind/article/details/38854517" target="_blank" rel="noreferrer">http://blog.csdn.net/finewind/article/details/38854517</a><br><a href="http://www.cnblogs.com/xylc/p/3683203.html" target="_blank" rel="noreferrer">http://www.cnblogs.com/xylc/p/3683203.html</a><br><a href="http://validvoid.net/build-and-use-ffmpeginterop-win10/#ffmpeg" target="_blank" rel="noreferrer">http://validvoid.net/build-and-use-ffmpeginterop-win10/#ffmpeg</a><br><a href="http://blog.csdn.net/hustlx/article/details/51014307" target="_blank" rel="noreferrer">http://blog.csdn.net/hustlx/article/details/51014307</a></p>',33)]))}const C=i(e,[["render",l]]);export{y as __pageData,C as default};
